rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 3;
    }

    function isTrainer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 2;
    }

    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 1;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isStudentTrainer(studentId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(studentId)).data.trainerId == request.auth.uid;
    }

    function canCommunicate(userId1, userId2) {
      let user1 = get(/databases/$(database)/documents/users/$(userId1)).data;
      let user2 = get(/databases/$(database)/documents/users/$(userId2)).data;
      
      return user1.level == 3 || user2.level == 3 || 
        (user1.level == 2 && user2.level == 1 && user2.trainerId == user1.id) ||
        (user1.level == 1 && user2.level == 2 && user1.trainerId == user2.id) ||
        user1.level == user2.level;
    }

    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isOwner(userId) || isTrainer();
      allow delete: if isAdmin();
    }

    // Regras para mensagens
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid ||
        canCommunicate(request.auth.uid, resource.data.senderId) ||
        canCommunicate(request.auth.uid, resource.data.receiverId)
      );
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid &&
        canCommunicate(request.resource.data.senderId, request.resource.data.receiverId)
      );
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid
      );
    }

    // Regras para dietas
    match /dietPlans/{dietId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId)
      );
      allow create: if isAuthenticated() && (
        request.resource.data.createdBy == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId)
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para treinos
    match /workouts/{workoutId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId)
      );
      allow create: if isAuthenticated() && (
        request.resource.data.createdBy == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId)
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para tarefas
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.trainerId == request.auth.uid
      );
      allow create: if isAuthenticated() && (
        request.resource.data.trainerId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para sugestões
    match /suggestions/{suggestionId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.trainerId == request.auth.uid
      );
      allow create: if isAuthenticated() && (
        request.resource.data.trainerId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para comentários
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para curtidas
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para notificações
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para métricas
    match /metrics/{metricId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isStudentTrainer(resource.data.userId)
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isStudentTrainer(resource.data.userId)
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }
  }
}
