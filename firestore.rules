rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isTrainer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'trainer';
    }

    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isTrainerOfStudent(studentId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(studentId)).data.trainerId == request.auth.uid;
    }

    function isStudentTrainer(studentId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(studentId)).data.trainerId == request.auth.uid;
    }

    function canCommunicate(userId1, userId2) {
      let user1 = get(/databases/$(database)/documents/users/$(userId1)).data;
      let user2 = get(/databases/$(database)/documents/users/$(userId2)).data;

      return user1.level == 3 || user2.level == 3 ||
        (user1.level == 2 && user2.level == 1 && user2.trainerId == user1.id) ||
        (user1.level == 1 && user2.level == 2 && user1.trainerId == user2.id) ||
        user1.level == user2.level;
    }

    // USERS
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // MESSAGES
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid ||
        canCommunicate(request.auth.uid, resource.data.senderId) ||
        canCommunicate(request.auth.uid, resource.data.receiverId)
      );

      allow create: if isAuthenticated() &&
        request.resource.data.senderId == request.auth.uid &&
        canCommunicate(request.resource.data.senderId, request.resource.data.receiverId);

      allow update, delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }

    // DIETS
    match /diets/{dietId} {
      allow read: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow create: if isTrainer();
      allow update: if isTrainer() && resource.data.trainerId == request.auth.uid;
      allow delete: if isTrainer() && resource.data.trainerId == request.auth.uid;
    }

    // WORKOUTS
    match /workouts/{workoutId} {
      allow read: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid ||
        isTrainerOfStudent(resource.data.studentId)
      );
      allow create: if isTrainer();
      allow update: if isTrainer() && (
        resource.data.trainerId == request.auth.uid ||
        request.resource.data.trainerId == request.auth.uid
      );
      allow delete: if isTrainer() && (
        resource.data.trainerId == request.auth.uid ||
        request.resource.data.trainerId == request.auth.uid
      );
    }

    // TASKS
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow create: if isTrainer();
      allow update: if isTrainer() && resource.data.trainerId == request.auth.uid;
      allow delete: if isTrainer() && resource.data.trainerId == request.auth.uid;
    }

    // SUGGESTIONS
    match /suggestions/{suggestionId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
        request.resource.data.trainerId == request.auth.uid;

      allow update: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );

      allow delete: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid || isAdmin()
      );
    }

    // POSTS
    match /posts/{postId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid;

      allow update, delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid || isAdmin()
      );
    }

    // COMMENTS
    match /comments/{commentId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
        request.resource.data.authorId == request.auth.uid;

      allow update, delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid || isAdmin()
      );
    }

    // LIKES
    match /likes/{likeId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.trainerId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // METRICS
    match /metrics/{metricId} {
      allow read, update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isStudentTrainer(resource.data.userId)
      );

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // EVALUATIONS
    match /evaluations/{evaluationId} {
      allow read: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isTrainer() && resource.data.trainerId == request.auth.uid;
    }

    // MEASUREMENTS
    match /measurements/{measurementId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.studentId) || 
        isOwner(resource.data.trainerId)
      );
      allow create: if isStudent() && 
        request.resource.data.studentId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isOwner(resource.data.studentId) || 
        isOwner(resource.data.trainerId)
      );
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.studentId) || 
        isOwner(resource.data.trainerId)
      );
    }
  }
}
