rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 3;
    }

    function isTrainer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 2;
    }

    function isStudent() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 1;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isStudentTrainer(studentId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(studentId)).data.trainerId == request.auth.uid;
    }

    function canCommunicate(userId1, userId2) {
      let user1 = get(/databases/$(database)/documents/users/$(userId1)).data;
      let user2 = get(/databases/$(database)/documents/users/$(userId2)).data;
      
      return user1.level == 3 || user2.level == 3 || 
        (user1.level == 2 && user2.level == 1 && user2.trainerId == user1.id) ||
        (user1.level == 1 && user2.level == 2 && user1.trainerId == user2.id) ||
        user1.level == user2.level;
    }

    function getTrainerStudentCount(trainerId) {
      return getAfter(/databases/$(database)/documents/users/$(trainerId)).data.studentCount || 0;
    }

    // Regras para usuários
    match /users/{userId} {
      // Permite leitura para usuários autenticados
      allow read: if isAuthenticated();
      
      // Permite criação de usuários
      allow create: if request.auth != null && (
        isAdmin() || 
        (isTrainer() && request.resource.data.level == 1 && request.resource.data.trainerId == request.auth.uid && getTrainerStudentCount(request.auth.uid) < 5) ||
        (request.resource.data.level == 2 && request.auth.uid == userId && request.resource.data.trainerCode != null) ||
        (request.resource.data.level == 1 && request.auth.uid == userId)
      );
      
      // Permite atualização para o próprio usuário, admin ou professor relacionado
      allow update: if request.auth != null && (
        isAdmin() || 
        request.auth.uid == userId || 
        (isTrainer() && resource.data.trainerId == request.auth.uid) ||
        (isTrainer() && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['pendingTrainerApproval', 'trainerId'])) ||
        // Permite atualização de status online
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['isOnline', 'lastSeen']))
      );
      
      // Permite deleção apenas para admin
      allow delete: if request.auth != null && isAdmin();

      // Regra específica para busca de professores pelo código
      allow list: if isAuthenticated() && (
        request.query.limit <= 10 &&
        request.query.filters.size() == 2 &&
        request.query.filters[0].op == '==' &&
        request.query.filters[0].field == 'level' &&
        request.query.filters[0].value == 2 &&
        request.query.filters[1].op == '==' &&
        request.query.filters[1].field == 'trainerCode'
      );

      // Regra específica para listar solicitações de alunos pendentes
      allow list: if isAuthenticated() && (
        request.query.limit <= 10 &&
        request.query.filters.size() == 2 &&
        request.query.filters[0].op == '==' &&
        request.query.filters[0].field == 'trainerId' &&
        request.query.filters[0].value == request.auth.uid &&
        request.query.filters[1].op == '==' &&
        request.query.filters[1].field == 'pendingTrainerApproval' &&
        request.query.filters[1].value == true
      );
    }

    // Regras para mensagens
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid ||
        canCommunicate(request.auth.uid, resource.data.senderId) ||
        canCommunicate(request.auth.uid, resource.data.receiverId)
      );
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid &&
        canCommunicate(request.resource.data.senderId, request.resource.data.receiverId)
      );
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid
      );
    }

    // Regras para dietas
    match /dietPlans/{dietId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId)
      );
      allow create: if isAuthenticated() && (
        request.resource.data.createdBy == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId)
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para treinos
    match /workouts/{workoutId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.createdBy == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isStudentTrainer(resource.data.studentId) ||
        (resource.data.studentId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'workoutTime', 'completedAt', 'completedDate', 'completedExercises']))
      );
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para tarefas
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.trainerId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        isTrainer() || 
        (isStudent() && request.resource.data.type == 'evaluation' && request.resource.data.studentId == request.auth.uid)
      );
      allow update: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para sugestões
    match /suggestions/{suggestionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.trainerId == request.auth.uid
      );
      allow update: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        resource.data.trainerId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para comentários
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.authorId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para curtidas
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para notificações
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para métricas
    match /metrics/{metricId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isStudentTrainer(resource.data.userId)
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isStudentTrainer(resource.data.userId)
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Regras para avaliações
    match /evaluations/{evaluationId} {
      allow read: if isAuthenticated() && (
        resource.data.studentId == request.auth.uid || 
        resource.data.trainerId == request.auth.uid
      );
      allow create: if isTrainer();
      allow update: if isTrainer() && resource.data.trainerId == request.auth.uid;
      allow delete: if isTrainer() && resource.data.trainerId == request.auth.uid;
    }
  }
}
